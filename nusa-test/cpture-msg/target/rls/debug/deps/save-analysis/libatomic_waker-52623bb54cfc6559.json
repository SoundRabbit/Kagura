{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0","program":"C:\\Users\\nenou_sa\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","atomic_waker","--edition=2018","C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=52623bb54cfc6559","-C","extra-filename=-52623bb54cfc6559","--out-dir","d:\\program\\Kagura\\nusa-test\\cpture-msg\\target\\rls\\debug\\deps","-L","dependency=d:\\program\\Kagura\\nusa-test\\cpture-msg\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\nenou_sa\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\program\\Kagura\\nusa-test\\cpture-msg\\target\\rls\\debug\\deps\\libatomic_waker-52623bb54cfc6559.rmeta"},"prelude":{"crate_id":{"name":"atomic_waker","disambiguator":[1448401085509523723,0]},"crate_root":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src","external_crates":[{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[7976927198175868373,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[11165144592143370822,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[252041924521724887,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5467317383579905353,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7624884120048857693,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[11703982264691436790,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2970152443746782806,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9222488229097456044,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7853498759631503325,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16147963203778103955,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14622278557065309757,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[12620427935833221912,0]}},{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[5227252993197737239,0]}}],"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":0,"byte_end":16949,"line_start":1,"line_end":414,"column_start":1,"column_end":36}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":0,"byte_end":16949,"line_start":1,"line_end":414,"column_start":1,"column_end":36},"name":"","qualname":"::","value":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":43}],"decl_id":null,"docs":" `futures::task::AtomicWaker` extracted into its own crate.\n","sig":null,"attributes":[{"value":"/ `futures::task::AtomicWaker` extracted into its own crate.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2960,"byte_end":2971,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"AtomicWaker","qualname":"::AtomicWaker","value":"AtomicWaker {  }","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" A synchronization primitive for task wakeup.","sig":null,"attributes":[{"value":"/ A synchronization primitive for task wakeup.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":225,"byte_end":273,"line_start":9,"line_end":9,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":274,"byte_end":277,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Sometimes the task interested in a given event will change over time.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":278,"byte_end":351,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ An `AtomicWaker` can coordinate concurrent notifications with the consumer","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":352,"byte_end":430,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ potentially \"updating\" the underlying task to wake up. This is useful in","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":431,"byte_end":507,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ scenarios where a computation completes in another thread and wants to","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":508,"byte_end":582,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/ notify the consumer, but the consumer is in the process of being migrated to","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":583,"byte_end":663,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ a new logical task.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":664,"byte_end":687,"line_start":16,"line_end":16,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":688,"byte_end":691,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Consumers should call `register` before checking the result of a computation","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":692,"byte_end":772,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ and producers should call `wake` after producing the computation (this","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":773,"byte_end":847,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ differs from the usual `thread::park` pattern). It is also permitted for","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":848,"byte_end":924,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ `wake` to be called **before** `register`. This results in a no-op.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":925,"byte_end":996,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":997,"byte_end":1000,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ A single `AtomicWaker` may be reused for any number of calls to `register` or","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1001,"byte_end":1082,"line_start":23,"line_end":23,"column_start":1,"column_end":82}},{"value":"/ `wake`.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1083,"byte_end":1094,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1095,"byte_end":1098,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Memory ordering","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1099,"byte_end":1120,"line_start":26,"line_end":26,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1121,"byte_end":1124,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Calling `register` \"acquires\" all memory \"released\" by calls to `wake`","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1125,"byte_end":1199,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ before the call to `register`.  Later calls to `wake` will wake the","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1200,"byte_end":1271,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ registered waker (on contention this wake might be triggered in `register`).","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1272,"byte_end":1352,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1353,"byte_end":1356,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ For concurrent calls to `register` (should be avoided) the ordering is only","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1357,"byte_end":1436,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ guaranteed for the winning call.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1437,"byte_end":1473,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1474,"byte_end":1477,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1478,"byte_end":1492,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1493,"byte_end":1496,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Here is a simple example providing a `Flag` that can be signalled manually","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1497,"byte_end":1575,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ when it is ready.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1576,"byte_end":1597,"line_start":38,"line_end":38,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1598,"byte_end":1601,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1602,"byte_end":1609,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/ use futures::future::Future;","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1610,"byte_end":1642,"line_start":41,"line_end":41,"column_start":1,"column_end":33}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1643,"byte_end":1695,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/ use std::sync::Arc;","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1696,"byte_end":1719,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1720,"byte_end":1758,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1759,"byte_end":1804,"line_start":45,"line_end":45,"column_start":1,"column_end":46}},{"value":"/ use std::pin::Pin;","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1805,"byte_end":1827,"line_start":46,"line_end":46,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1828,"byte_end":1831,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ struct Inner {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1832,"byte_end":1850,"line_start":48,"line_end":48,"column_start":1,"column_end":19}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1851,"byte_end":1878,"line_start":49,"line_end":49,"column_start":1,"column_end":28}},{"value":"/     set: AtomicBool,","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1879,"byte_end":1903,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1904,"byte_end":1909,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1910,"byte_end":1913,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone)]","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1914,"byte_end":1934,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/ struct Flag(Arc<Inner>);","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1935,"byte_end":1963,"line_start":54,"line_end":54,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1964,"byte_end":1967,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ impl Flag {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1968,"byte_end":1983,"line_start":56,"line_end":56,"column_start":1,"column_end":16}},{"value":"/     pub fn new() -> Self {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":1984,"byte_end":2014,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"/         Flag(Arc::new(Inner {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2015,"byte_end":2048,"line_start":58,"line_end":58,"column_start":1,"column_end":34}},{"value":"/             waker: AtomicWaker::new(),","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2049,"byte_end":2091,"line_start":59,"line_end":59,"column_start":1,"column_end":43}},{"value":"/             set: AtomicBool::new(false),","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2092,"byte_end":2136,"line_start":60,"line_end":60,"column_start":1,"column_end":45}},{"value":"/         }))","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2137,"byte_end":2152,"line_start":61,"line_end":61,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2153,"byte_end":2162,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2163,"byte_end":2166,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/     pub fn signal(&self) {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2167,"byte_end":2197,"line_start":64,"line_end":64,"column_start":1,"column_end":31}},{"value":"/         self.0.set.store(true, Relaxed);","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2198,"byte_end":2242,"line_start":65,"line_end":65,"column_start":1,"column_end":45}},{"value":"/         self.0.waker.wake();","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2243,"byte_end":2275,"line_start":66,"line_end":66,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2276,"byte_end":2285,"line_start":67,"line_end":67,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2286,"byte_end":2291,"line_start":68,"line_end":68,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2292,"byte_end":2295,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ impl Future for Flag {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2296,"byte_end":2322,"line_start":70,"line_end":70,"column_start":1,"column_end":27}},{"value":"/     type Output = ();","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2323,"byte_end":2348,"line_start":71,"line_end":71,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2349,"byte_end":2352,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2353,"byte_end":2426,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/         // quick check to avoid registration if already done.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2427,"byte_end":2492,"line_start":74,"line_end":74,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2493,"byte_end":2534,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/             return Poll::Ready(());","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2535,"byte_end":2574,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2575,"byte_end":2588,"line_start":77,"line_end":77,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2589,"byte_end":2592,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/         self.0.waker.register(cx.waker());","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2593,"byte_end":2639,"line_start":79,"line_end":79,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2640,"byte_end":2643,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/         // Need to check condition **after** `register` to avoid a race","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2644,"byte_end":2719,"line_start":81,"line_end":81,"column_start":1,"column_end":76}},{"value":"/         // condition that would result in lost notifications.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2720,"byte_end":2785,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2786,"byte_end":2827,"line_start":83,"line_end":83,"column_start":1,"column_end":42}},{"value":"/             Poll::Ready(())","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2828,"byte_end":2859,"line_start":84,"line_end":84,"column_start":1,"column_end":32}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2860,"byte_end":2880,"line_start":85,"line_end":85,"column_start":1,"column_end":21}},{"value":"/             Poll::Pending","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2881,"byte_end":2910,"line_start":86,"line_end":86,"column_start":1,"column_end":30}},{"value":"/         }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2911,"byte_end":2924,"line_start":87,"line_end":87,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2925,"byte_end":2934,"line_start":88,"line_end":88,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2935,"byte_end":2940,"line_start":89,"line_end":89,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":2941,"byte_end":2948,"line_start":90,"line_end":90,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8036,"byte_end":8039,"line_start":202,"line_end":202,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicWaker>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `AtomicWaker`.\n","sig":null,"attributes":[{"value":"/ Create an `AtomicWaker`.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":7990,"byte_end":8018,"line_start":201,"line_end":201,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10332,"byte_end":10340,"line_start":263,"line_end":263,"column_start":12,"column_end":20},"name":"register","qualname":"<AtomicWaker>::register","value":"pub fn register(&Self, &Waker)","parent":null,"children":[],"decl_id":null,"docs":" Registers the waker to be notified on calls to `wake`.","sig":null,"attributes":[{"value":"/ Registers the waker to be notified on calls to `wake`.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8294,"byte_end":8352,"line_start":213,"line_end":213,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8357,"byte_end":8360,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ The new task will take place of any previous tasks that were registered","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8365,"byte_end":8440,"line_start":215,"line_end":215,"column_start":5,"column_end":80}},{"value":"/ by previous calls to `register`. Any calls to `wake` that happen after","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8445,"byte_end":8519,"line_start":216,"line_end":216,"column_start":5,"column_end":79}},{"value":"/ a call to `register` (as defined by the memory ordering rules), will","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8524,"byte_end":8596,"line_start":217,"line_end":217,"column_start":5,"column_end":77}},{"value":"/ notify the `register` caller's task and deregister the waker from future","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8601,"byte_end":8677,"line_start":218,"line_end":218,"column_start":5,"column_end":81}},{"value":"/ notifications. Because of this, callers should ensure `register` gets","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8682,"byte_end":8755,"line_start":219,"line_end":219,"column_start":5,"column_end":78}},{"value":"/ invoked with a new `Waker` **each** time they require a wakeup.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8760,"byte_end":8827,"line_start":220,"line_end":220,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8832,"byte_end":8835,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ It is safe to call `register` with multiple other threads concurrently","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8840,"byte_end":8914,"line_start":222,"line_end":222,"column_start":5,"column_end":79}},{"value":"/ calling `wake`. This will result in the `register` caller's current","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8919,"byte_end":8990,"line_start":223,"line_end":223,"column_start":5,"column_end":76}},{"value":"/ task being notified once.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8995,"byte_end":9024,"line_start":224,"line_end":224,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9029,"byte_end":9032,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ This function is safe to call concurrently, but this is generally a bad","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9037,"byte_end":9112,"line_start":226,"line_end":226,"column_start":5,"column_end":80}},{"value":"/ idea. Concurrent calls to `register` will attempt to register different","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9117,"byte_end":9192,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/ tasks to be notified. One of the callers will win and have its task set,","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9197,"byte_end":9273,"line_start":228,"line_end":228,"column_start":5,"column_end":81}},{"value":"/ but there is no guarantee as to which caller will succeed.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9278,"byte_end":9340,"line_start":229,"line_end":229,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9345,"byte_end":9348,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9353,"byte_end":9367,"line_start":231,"line_end":231,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9372,"byte_end":9375,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Here is how `register` is used when implementing a flag.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9380,"byte_end":9440,"line_start":233,"line_end":233,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9445,"byte_end":9448,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9453,"byte_end":9460,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ use futures::future::Future;","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9465,"byte_end":9497,"line_start":236,"line_end":236,"column_start":5,"column_end":37}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9502,"byte_end":9554,"line_start":237,"line_end":237,"column_start":5,"column_end":57}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9559,"byte_end":9597,"line_start":238,"line_end":238,"column_start":5,"column_end":43}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9602,"byte_end":9647,"line_start":239,"line_end":239,"column_start":5,"column_end":50}},{"value":"/ use std::pin::Pin;","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9652,"byte_end":9674,"line_start":240,"line_end":240,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9679,"byte_end":9682,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ struct Flag {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9687,"byte_end":9704,"line_start":242,"line_end":242,"column_start":5,"column_end":22}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9709,"byte_end":9736,"line_start":243,"line_end":243,"column_start":5,"column_end":32}},{"value":"/     set: AtomicBool,","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9741,"byte_end":9765,"line_start":244,"line_end":244,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9770,"byte_end":9775,"line_start":245,"line_end":245,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9780,"byte_end":9783,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ impl Future for Flag {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9788,"byte_end":9814,"line_start":247,"line_end":247,"column_start":5,"column_end":31}},{"value":"/     type Output = ();","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9819,"byte_end":9844,"line_start":248,"line_end":248,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9849,"byte_end":9852,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9857,"byte_end":9930,"line_start":250,"line_end":250,"column_start":5,"column_end":78}},{"value":"/         // Register **before** checking `set` to avoid a race condition","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":9935,"byte_end":10010,"line_start":251,"line_end":251,"column_start":5,"column_end":80}},{"value":"/         // that would result in lost notifications.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10015,"byte_end":10070,"line_start":252,"line_end":252,"column_start":5,"column_end":60}},{"value":"/         self.waker.register(cx.waker());","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10075,"byte_end":10119,"line_start":253,"line_end":253,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10124,"byte_end":10127,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/         if self.set.load(Relaxed) {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10132,"byte_end":10171,"line_start":255,"line_end":255,"column_start":5,"column_end":44}},{"value":"/             Poll::Ready(())","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10176,"byte_end":10207,"line_start":256,"line_end":256,"column_start":5,"column_end":36}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10212,"byte_end":10232,"line_start":257,"line_end":257,"column_start":5,"column_end":25}},{"value":"/             Poll::Pending","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10237,"byte_end":10266,"line_start":258,"line_end":258,"column_start":5,"column_end":34}},{"value":"/         }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10271,"byte_end":10284,"line_start":259,"line_end":259,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10289,"byte_end":10298,"line_start":260,"line_end":260,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10303,"byte_end":10308,"line_start":261,"line_end":261,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":10313,"byte_end":10320,"line_start":262,"line_end":262,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15008,"byte_end":15012,"line_start":355,"line_end":355,"column_start":12,"column_end":16},"name":"wake","qualname":"<AtomicWaker>::wake","value":"pub fn wake(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Calls `wake` on the last `Waker` passed to `register`.","sig":null,"attributes":[{"value":"/ Calls `wake` on the last `Waker` passed to `register`.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":14859,"byte_end":14917,"line_start":352,"line_end":352,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":14922,"byte_end":14925,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ If `register` has not been called yet, then this does nothing.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":14930,"byte_end":14996,"line_start":354,"line_end":354,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15508,"byte_end":15512,"line_start":369,"line_end":369,"column_start":12,"column_end":16},"name":"take","qualname":"<AtomicWaker>::take","value":"pub fn take(&Self) -> Option<Waker>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last `Waker` passed to `register`, so that the user can wake it.","sig":null,"attributes":[{"value":"/ Returns the last `Waker` passed to `register`, so that the user can wake it.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15112,"byte_end":15192,"line_start":361,"line_end":361,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15197,"byte_end":15200,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15205,"byte_end":15208,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Sometimes, just waking the AtomicWaker is not fine grained enough. This allows the user","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15213,"byte_end":15304,"line_start":364,"line_end":364,"column_start":5,"column_end":96}},{"value":"/ to take the waker and then wake it separately, rather than performing both steps in one","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15309,"byte_end":15400,"line_start":365,"line_end":365,"column_start":5,"column_end":96}},{"value":"/ atomic action.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15405,"byte_end":15423,"line_start":366,"line_end":366,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15428,"byte_end":15431,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ If a waker has not been registered, this returns `None`.","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":15436,"byte_end":15496,"line_start":368,"line_end":368,"column_start":5,"column_end":65}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":7972,"byte_end":7983,"line_start":200,"line_end":200,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8153,"byte_end":8158,"line_start":205,"line_end":205,"column_start":29,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":16662,"byte_end":16673,"line_start":401,"line_end":401,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":16759,"byte_end":16770,"line_start":407,"line_end":407,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":16899,"byte_end":16910,"line_start":413,"line_end":413,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":16935,"byte_end":16946,"line_start":414,"line_end":414,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":7972,"byte_end":7983,"line_start":200,"line_end":200,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8117,"byte_end":8121,"line_start":204,"line_end":204,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3001},"to":{"krate":0,"index":33}},{"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":8153,"byte_end":8158,"line_start":205,"line_end":205,"column_start":29,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":2,"index":12829},"to":{"krate":0,"index":33}},{"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":16662,"byte_end":16673,"line_start":401,"line_end":401,"column_start":18,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":2967}},{"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":16759,"byte_end":16770,"line_start":407,"line_end":407,"column_start":21,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":9300}},{"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":16899,"byte_end":16910,"line_start":413,"line_end":413,"column_start":22,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":2989}},{"span":{"file_name":"C:\\Users\\nenou_sa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-waker-1.0.0\\src\\lib.rs","byte_start":16935,"byte_end":16946,"line_start":414,"line_end":414,"column_start":22,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":3001}}]}